{"version":3,"file":"index.mjs","sources":["../lib/validate.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObject from '@stdlib/assert-is-plain-object';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport { primitives as isIntegerArray } from '@stdlib/assert-is-integer-array';\nimport isEmptyCollection from '@stdlib/assert-is-empty-collection';\nimport normalizeIndices from '@stdlib/ndarray-base-to-unique-normalized-indices';\nimport join from '@stdlib/array-base-join';\nimport contains from '@stdlib/array-base-assert-contains';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {NonNegativeInteger} ndims - number of input ndarray dimensions\n* @param {Array} dtypes - list of supported output data types\n* @param {Options} options - function options\n* @param {boolean} [options.keepdims] - boolean indicating whether the reduced dimensions should be included in the returned ndarray as singleton dimensions\n* @param {IntegerArray} [options.dims] - list of dimensions over which to perform a reduction\n* @param {string} [options.dtype] - output ndarray data type\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var dtypes = [ 'float64', 'float32', 'generic' ];\n*\n* var opts = {};\n* var options = {\n*     'keepdims': true\n* };\n* var err = validate( opts, 3, dtypes, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, ndims, dtypes, options ) {\n\tvar tmp;\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'null2V', options ) );\n\t}\n\tif ( hasOwnProp( options, 'keepdims' ) ) {\n\t\topts.keepdims = options.keepdims;\n\t\tif ( !isBoolean( opts.keepdims ) ) {\n\t\t\treturn new TypeError( format( 'null2o', 'keepdims', opts.keepdims ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'dims' ) ) {\n\t\topts.dims = options.dims;\n\t\tif ( !isIntegerArray( opts.dims ) && !isEmptyCollection( opts.dims ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an array of integers. Option: `%s`.', 'dims', opts.dims ) );\n\t\t}\n\t\ttmp = normalizeIndices( opts.dims, ndims-1 );\n\t\tif ( tmp === null ) {\n\t\t\treturn new RangeError( format( 'invalid option. `%s` option contains an out-of-bounds dimension index. Option: [%s].', 'dims', join( opts.dims, ',' ) ) );\n\t\t}\n\t\tif ( tmp.length !== opts.dims.length ) {\n\t\t\treturn new Error( format( 'invalid option. `%s` option contains duplicate indices. Option: [%s].', 'dims', join( opts.dims, ',' ) ) );\n\t\t}\n\t\topts.dims = tmp;\n\t}\n\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\topts.dtype = options.dtype;\n\t\tif ( !contains( dtypes, opts.dtype ) ) {\n\t\t\treturn new TypeError( format( 'null4S', 'dtype', join( dtypes, '\", \"' ), opts.dtype ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport isndarrayLike from '@stdlib/assert-is-ndarray-like';\nimport isObject from '@stdlib/assert-is-object';\nimport isFunction from '@stdlib/assert-is-function';\nimport isCollection from '@stdlib/assert-is-collection';\nimport isDataType from '@stdlib/array-base-assert-is-data-type';\nimport isOutputDataTypePolicy from '@stdlib/ndarray-base-assert-is-output-data-type-policy';\nimport contains from '@stdlib/array-base-assert-contains';\nimport unaryReduceStrided1d from '@stdlib/ndarray-base-unary-reduce-strided1d';\nimport unaryOutputDataType from '@stdlib/ndarray-base-unary-output-dtype';\nimport spreadDimensions from '@stdlib/ndarray-base-spread-dimensions';\nimport getShape from '@stdlib/ndarray-shape'; // note: non-base accessor is intentional due to input ndarrays originating in userland\nimport ndims from '@stdlib/ndarray-ndims';\nimport getDType from '@stdlib/ndarray-base-dtype';\nimport getOrder from '@stdlib/ndarray-base-order';\nimport empty from '@stdlib/ndarray-empty';\nimport indicesComplement from '@stdlib/array-base-indices-complement';\nimport takeIndexed from '@stdlib/array-base-take-indexed';\nimport zeroTo from '@stdlib/array-base-zero-to';\nimport join from '@stdlib/array-base-join';\nimport everyBy from '@stdlib/array-base-every-by';\nimport objectAssign from '@stdlib/object-assign';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport defaults from './defaults.json';\nimport validate from './validate.js';\n\n\n// MAIN //\n\n/**\n* Constructor for performing a reduction on an input ndarray.\n*\n* @constructor\n* @param {Object} table - dispatch table containing strided array reduction functions\n* @param {ArrayLikeObject<StringArray>} idtypes - list containing lists of supported input data types for each ndarray argument\n* @param {StringArray} odtypes - list of supported output data types\n* @param {string} policy - output data type policy\n* @throws {TypeError} first argument must be an object\n* @throws {TypeError} second argument must be an array containing arrays of supported data types\n* @throws {TypeError} third argument must be an array of supported data types\n* @throws {TypeError} fourth argument must be a supported output data type policy\n* @returns {UnaryStrided1dDispatch} instance\n*\n* @example\n* import base from '@stdlib/stats-base-ndarray-max';\n* import dtypes from '@stdlib/ndarray-dtypes';\n* import ndarray from '@stdlib/ndarray-base-ctor';\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = idt;\n* var policy = 'same';\n*\n* var table = {\n*     'default': base\n* };\n* var max = new UnaryStrided1dDispatch( table, [ idt ], odt, policy );\n*\n* var xbuf = [ -1.0, 2.0, -3.0 ];\n* var x = new ndarray( 'generic', xbuf, [ xbuf.length ], [ 1 ], 0, 'row-major' );\n*\n* var y = max.apply( x );\n* // returns <ndarray>\n*\n* var v = y.get();\n* // returns 2.0\n*/\nfunction UnaryStrided1dDispatch( table, idtypes, odtypes, policy ) {\n\tvar dt;\n\tvar i;\n\tif ( !( this instanceof UnaryStrided1dDispatch ) ) {\n\t\treturn new UnaryStrided1dDispatch( table, idtypes, odtypes, policy );\n\t}\n\tif ( !isObject( table ) ) {\n\t\tthrow new TypeError( format( 'null3L', table ) );\n\t}\n\tif ( !isFunction( table.default ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an object having a \"default\" property and an associated method.' ) );\n\t}\n\tif ( !isCollection( idtypes ) ) {\n\t\tthrow new TypeError( format( 'null2y', idtypes ) );\n\t}\n\tfor ( i = 0; i < idtypes.length; i++ ) {\n\t\tdt = idtypes[ i ];\n\t\tif (\n\t\t\t!isCollection( dt ) ||\n\t\t\tdt.length < 1 ||\n\t\t\t!everyBy( dt, isDataType )\n\t\t) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must contain arrays of data types. Value: `%s`.', idtypes ) );\n\t\t}\n\t}\n\tif (\n\t\t!isCollection( odtypes ) ||\n\t\todtypes.length < 1 ||\n\t\t!everyBy( odtypes, isDataType )\n\t) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an array of data types. Value: `%s`.', odtypes ) );\n\t}\n\tif ( !isOutputDataTypePolicy( policy ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be a supported output data type policy. Value: `%s`.', policy ) );\n\t}\n\tthis._table = table;\n\tthis._idtypes = idtypes;\n\tthis._odtypes = odtypes;\n\tthis._policy = policy;\n\treturn this;\n}\n\n/**\n* Performs a reduction on a provided input ndarray.\n*\n* @name apply\n* @memberof UnaryStrided1dDispatch.prototype\n* @type {Function}\n* @param {ndarrayLike} x - input ndarray\n* @param {...ndarrayLike} [args] - additional ndarray arguments\n* @param {Options} [options] - function options\n* @param {IntegerArray} [options.dims] - list of dimensions over which to perform a reduction\n* @param {boolean} [options.keepdims=false] - boolean indicating whether the reduced dimensions should be included in the returned ndarray as singleton dimensions\n* @param {string} [options.dtype] - output ndarray data type\n* @throws {TypeError} first argument must be an ndarray-like object\n* @throws {TypeError} options argument must be an object\n* @throws {RangeError} dimension indices must not exceed input ndarray bounds\n* @throws {RangeError} number of dimension indices must not exceed the number of input ndarray dimensions\n* @throws {Error} must provide valid options\n* @returns {ndarray} output ndarray\n*\n* @example\n* import base from '@stdlib/stats-base-ndarray-max';\n* import dtypes from '@stdlib/ndarray-dtypes';\n* import ndarray from '@stdlib/ndarray-base-ctor';\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = idt;\n* var policy = 'same';\n*\n* var table = {\n*     'default': base\n* };\n* var max = new UnaryStrided1dDispatch( table, [ idt ], odt, policy );\n*\n* var xbuf = [ -1.0, 2.0, -3.0 ];\n* var x = new ndarray( 'generic', xbuf, [ xbuf.length ], [ 1 ], 0, 'row-major' );\n*\n* var y = max.apply( x );\n* // returns <ndarray>\n*\n* var v = y.get();\n* // returns 2.0\n*/\nsetReadOnly( UnaryStrided1dDispatch.prototype, 'apply', function apply( x ) {\n\tvar options;\n\tvar nargs;\n\tvar args;\n\tvar opts;\n\tvar err;\n\tvar idx;\n\tvar shx;\n\tvar shy;\n\tvar arr;\n\tvar dt;\n\tvar f;\n\tvar N;\n\tvar y;\n\tvar i;\n\n\tnargs = arguments.length;\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'null5t', x ) );\n\t}\n\tdt = getDType( x );\n\tif ( !contains( this._idtypes[ 0 ], dt ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must have one of the following data types: \"%s\". Data type: `%s`.', join( this._idtypes[ 0 ], '\", \"' ), dt ) );\n\t}\n\targs = [ x ];\n\tfor ( i = 1; i < nargs; i++ ) {\n\t\tarr = arguments[ i ];\n\t\tif ( !isndarrayLike( arr ) ) {\n\t\t\tbreak;\n\t\t}\n\t\tdt = getDType( arr );\n\t\tif ( !contains( this._idtypes[ i ], dt ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Argument %d must have one of the following data types: \"%s\". Data type: `%s`.', i, join( this._idtypes[ i ], '\", \"' ), dt ) );\n\t\t}\n\t\targs.push( arr );\n\t}\n\t// If we didn't make it up until the last argument, this means that we found a non-options argument which was not an ndarray...\n\tif ( i < nargs-1 ) {\n\t\tthrow new TypeError( format( 'invalid argument. Argument %d must be an ndarray-like object. Value: `%s`.', i, arguments[ i ] ) );\n\t}\n\tshx = getShape( x );\n\tN = shx.length;\n\n\topts = objectAssign( {}, defaults );\n\tif ( nargs > i ) {\n\t\toptions = arguments[ nargs-1 ];\n\t\terr = validate( opts, N, this._odtypes, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// When a list of dimensions is not provided, reduce the entire input array across all dimensions...\n\tif ( opts.dims === null ) {\n\t\topts.dims = zeroTo( N );\n\t}\n\t// Resolve the list of non-reduced dimensions:\n\tidx = indicesComplement( N, opts.dims );\n\n\t// Resolve the output array shape:\n\tshy = takeIndexed( shx, idx );\n\n\t// Initialize an output array whose shape matches that of the non-reduced dimensions and which has the same memory layout as the input array:\n\ty = empty( shy, {\n\t\t'dtype': opts.dtype || unaryOutputDataType( dt, this._policy ),\n\t\t'order': getOrder( x )\n\t});\n\n\t// Resolve the lower-level reduction function based on the data type of the input ndarray:\n\tf = this._table[ dt ] || this._table.default;\n\n\t// Perform the reduction:\n\targs.push( y );\n\tunaryReduceStrided1d( f, args, opts.dims );\n\n\t// Check whether we need to reinsert singleton dimensions which can be useful for broadcasting the returned output array to the shape of the original input array...\n\tif ( opts.keepdims ) {\n\t\ty = spreadDimensions( N, y, idx );\n\t}\n\treturn y;\n});\n\n/**\n* Performs a reduction on a provided input ndarray and assigns results to a provided output ndarray.\n*\n* @name assign\n* @memberof UnaryStrided1dDispatch.prototype\n* @type {Function}\n* @param {ndarrayLike} x - input ndarray\n* @param {...ndarrayLike} [args] - additional ndarray arguments\n* @param {ndarrayLike} out - output ndarray\n* @param {Options} [options] - function options\n* @param {IntegerArray} [options.dims] - list of dimensions over which to perform a reduction\n* @throws {TypeError} first argument must be an ndarray\n* @throws {TypeError} first argument must have a supported data type\n* @throws {TypeError} output argument must be an ndarray\n* @throws {TypeError} options argument must be an object\n* @throws {RangeError} dimension indices must not exceed input ndarray bounds\n* @throws {RangeError} number of dimension indices must not exceed the number of input ndarray dimensions\n* @throws {Error} must provide valid options\n* @returns {ndarrayLike} output ndarray\n*\n* @example\n* import base from '@stdlib/stats-base-ndarray-max';\n* import dtypes from '@stdlib/ndarray-dtypes';\n* import ndarray from '@stdlib/ndarray-base-ctor';\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = idt;\n* var policy = 'same';\n*\n* var table = {\n*     'default': base\n* };\n* var max = new UnaryStrided1dDispatch( table, [ idt ], odt, policy );\n*\n* var xbuf = [ -1.0, 2.0, -3.0 ];\n* var x = new ndarray( 'generic', xbuf, [ xbuf.length ], [ 1 ], 0, 'row-major' );\n*\n* var ybuf = [ 0.0 ];\n* var y = new ndarray( 'generic', ybuf, [], [ 0 ], 0, 'row-major' );\n*\n* var out = max.assign( x, y );\n* // returns <ndarray>\n*\n* var v = out.get();\n* // returns 2.0\n*\n* var bool = ( out === y );\n* // returns true\n*/\nsetReadOnly( UnaryStrided1dDispatch.prototype, 'assign', function assign( x ) {\n\tvar options;\n\tvar nargs;\n\tvar opts;\n\tvar args;\n\tvar arr;\n\tvar err;\n\tvar tmp;\n\tvar flg;\n\tvar dt;\n\tvar N;\n\tvar f;\n\tvar i;\n\n\tnargs = arguments.length;\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'null5t', x ) );\n\t}\n\t// Validate the input ndarray data type in order to maintain similar behavior to `apply` above...\n\tdt = getDType( x );\n\tif ( !contains( this._idtypes[ 0 ], dt ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must have one of the following data types: \"%s\". Data type: `%s`.', join( this._idtypes[ 0 ], '\", \"' ), dt ) );\n\t}\n\targs = [ x ];\n\n\t// Resolve additional ndarray arguments...\n\tfor ( i = 1; i < nargs; i++ ) {\n\t\tarr = arguments[ i ];\n\t\tif ( !isndarrayLike( arr ) ) {\n\t\t\tbreak;\n\t\t}\n\t\targs.push( arr );\n\t}\n\t// Ensure that we were provided an output ndarray...\n\tif ( i < 2 ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an ndarray-like object. Value: `%s`.', arguments[ 1 ] ) );\n\t}\n\t// If we processed all but the last argument, assume that the last argument is an options argument...\n\telse if ( i === nargs-1 ) {\n\t\toptions = arguments[ i ];\n\t\tflg = true;\n\t}\n\t// Otherwise, if we have more than one argument remaining, then at least one argument is not an ndarray but should be...\n\telse if ( i < nargs-1 ) {\n\t\tthrow new TypeError( format( 'invalid argument. Argument %d must be an ndarray-like object. Value: `%s`.', i, arguments[ i ] ) );\n\t}\n\t// Verify that additional ndarray arguments have expected dtypes (note: we intentionally don't validate the output ndarray dtype in order to provide an escape hatch for a user wanting to have an output ndarray having a specific dtype that `apply` does not support)...\n\tfor ( i = 1; i < args.length-1; i++ ) {\n\t\tdt = getDType( args[ i ] );\n\t\tif ( !contains( this._idtypes[ i ], dt ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Argument %d must have one of the following data types: \"%s\". Data type: `%s`.', i, join( this._idtypes[ i ], '\", \"' ), dt ) );\n\t\t}\n\t}\n\t// Validate any provided options...\n\tN = ndims( x );\n\topts = objectAssign( {}, defaults );\n\tif ( flg ) {\n\t\terr = validate( opts, N, this._odtypes, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// When a list of dimensions is not provided, reduce the entire input array across all dimensions...\n\tif ( opts.dims === null ) {\n\t\topts.dims = zeroTo( N );\n\t}\n\t// Resolve the lower-level reduction function based on the data type of the input ndarray:\n\tf = this._table[ dt ] || this._table.default;\n\n\t// Ensure that the output ndarray is the second ndarray argument when passing along to the lower-level reduction function below:\n\ttmp = args[ 1 ];\n\targs[ 1 ] = args[ args.length-1 ];\n\targs[ args.length-1 ] = tmp;\n\n\t// Perform the reduction:\n\tunaryReduceStrided1d( f, args, opts.dims ); // note: we assume that this lower-level function handles further validation of the output ndarray (e.g., expected shape, etc)\n\n\treturn args[ 1 ];\n});\n\n\n// EXPORTS //\n\nexport default UnaryStrided1dDispatch;\n"],"names":["validate","opts","ndims","dtypes","options","tmp","isObject","TypeError","format","hasOwnProp","keepdims","isBoolean","dims","isIntegerArray","isEmptyCollection","normalizeIndices","RangeError","join","length","Error","dtype","contains","UnaryStrided1dDispatch","table","idtypes","odtypes","policy","dt","i","this","isFunction","default","isCollection","everyBy","isDataType","isOutputDataTypePolicy","_table","_idtypes","_odtypes","_policy","setReadOnly","prototype","x","nargs","args","err","idx","shx","shy","arr","f","N","y","arguments","isndarrayLike","getDType","push","getShape","objectAssign","defaults","zeroTo","indicesComplement","takeIndexed","empty","unaryOutputDataType","order","getOrder","unaryReduceStrided1d","spreadDimensions","flg"],"mappings":"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"}