{"version":3,"file":"index.mjs","sources":["../lib/validate.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObject from '@stdlib/assert-is-plain-object';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport { primitives as isIntegerArray } from '@stdlib/assert-is-integer-array';\nimport isEmptyCollection from '@stdlib/assert-is-empty-collection';\nimport normalizeIndices from '@stdlib/ndarray-base-to-unique-normalized-indices';\nimport join from '@stdlib/array-base-join';\nimport contains from '@stdlib/array-base-assert-contains';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {NonNegativeInteger} ndims - number of input ndarray dimensions\n* @param {Array} dtypes - list of supported output data types\n* @param {Options} options - function options\n* @param {boolean} [options.keepdims] - boolean indicating whether the reduced dimensions should be included in the returned ndarray as singleton dimensions\n* @param {IntegerArray} [options.dims] - list of dimensions over which to perform a reduction\n* @param {string} [options.dtype] - output ndarray data type\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var dtypes = [ 'float64', 'float32', 'generic' ];\n*\n* var opts = {};\n* var options = {\n*     'keepdims': true\n* };\n* var err = validate( opts, 3, dtypes, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, ndims, dtypes, options ) {\n\tvar tmp;\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'null2V', options ) );\n\t}\n\tif ( hasOwnProp( options, 'keepdims' ) ) {\n\t\topts.keepdims = options.keepdims;\n\t\tif ( !isBoolean( opts.keepdims ) ) {\n\t\t\treturn new TypeError( format( 'null2o', 'keepdims', opts.keepdims ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'dims' ) ) {\n\t\topts.dims = options.dims;\n\t\tif ( !isIntegerArray( opts.dims ) && !isEmptyCollection( opts.dims ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an array of integers. Option: `%s`.', 'dims', opts.dims ) );\n\t\t}\n\t\ttmp = normalizeIndices( opts.dims, ndims-1 );\n\t\tif ( tmp === null ) {\n\t\t\treturn new RangeError( format( 'invalid option. `%s` option contains an out-of-bounds dimension index. Option: [%s].', 'dims', join( opts.dims, ',' ) ) );\n\t\t}\n\t\tif ( tmp.length !== opts.dims.length ) {\n\t\t\treturn new Error( format( 'invalid option. `%s` option contains duplicate indices. Option: [%s].', 'dims', join( opts.dims, ',' ) ) );\n\t\t}\n\t\topts.dims = tmp;\n\t}\n\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\topts.dtype = options.dtype;\n\t\tif ( !contains( dtypes, opts.dtype ) ) {\n\t\t\treturn new TypeError( format( 'null4S', 'dtype', join( dtypes, '\", \"' ), opts.dtype ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport hasProp from '@stdlib/assert-has-property';\nimport isndarrayLike from '@stdlib/assert-is-ndarray-like';\nimport isObject from '@stdlib/assert-is-object';\nimport isFunction from '@stdlib/assert-is-function';\nimport isCollection from '@stdlib/assert-is-collection';\nimport isEmptyCollection from '@stdlib/assert-is-empty-collection';\nimport isFunctionArray from '@stdlib/assert-is-function-array';\nimport isDataType from '@stdlib/ndarray-base-assert-is-data-type';\nimport isOutputDataTypePolicy from '@stdlib/ndarray-base-assert-is-output-data-type-policy';\nimport isInputCastingPolicy from '@stdlib/ndarray-base-assert-is-input-casting-policy';\nimport contains from '@stdlib/array-base-assert-contains';\nimport unaryReduceStrided1d from '@stdlib/ndarray-base-unary-reduce-strided1d';\nimport unaryOutputDataType from '@stdlib/ndarray-base-unary-output-dtype';\nimport unaryInputCastingDataType from '@stdlib/ndarray-base-unary-input-casting-dtype';\nimport resolveEnum from '@stdlib/ndarray-base-dtype-resolve-enum';\nimport dtypes2enums from '@stdlib/ndarray-base-dtypes2enums';\nimport spreadDimensions from '@stdlib/ndarray-base-spread-dimensions';\nimport getShape from '@stdlib/ndarray-shape'; // note: non-base accessor is intentional due to input ndarrays originating in userland\nimport ndims from '@stdlib/ndarray-ndims';\nimport getDType from '@stdlib/ndarray-base-dtype';\nimport getOrder from '@stdlib/ndarray-base-order';\nimport assign from '@stdlib/ndarray-base-assign';\nimport baseEmpty from '@stdlib/ndarray-base-empty';\nimport empty from '@stdlib/ndarray-empty';\nimport indicesComplement from '@stdlib/array-base-indices-complement';\nimport takeIndexed from '@stdlib/array-base-take-indexed';\nimport zeroTo from '@stdlib/array-base-zero-to';\nimport join from '@stdlib/array-base-join';\nimport copy from '@stdlib/array-base-copy';\nimport insertAt from '@stdlib/array-base-insert-at';\nimport everyBy from '@stdlib/array-base-every-by';\nimport { ndarray as gindexOfRow } from '@stdlib/blas-ext-base-gindex-of-row';\nimport objectAssign from '@stdlib/object-assign';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport defaults from './defaults.json';\nimport validate from './validate.js';\n\n\n// MAIN //\n\n/**\n* Constructor for performing a reduction on an input ndarray.\n*\n* @constructor\n* @param {Object} table - dispatch table\n* @param {Function} table.default - default strided reduction function\n* @param {StringArray} [table.types=[]] - one-dimensional list of ndarray data types describing specialized input ndarray argument signatures\n* @param {ArrayLikeObject<Function>} [table.fcns=[]] - list of strided reduction functions which are specific to specialized input ndarray argument signatures\n* @param {ArrayLikeObject<StringArray>} idtypes - list containing lists of supported input data types for each ndarray argument\n* @param {StringArray} odtypes - list of supported output data types\n* @param {Object} policies - policies\n* @param {string} policies.output - output data type policy\n* @param {string} policies.casting - input ndarray casting policy\n* @throws {TypeError} first argument must be an object having valid properties\n* @throws {TypeError} second argument must be an array containing arrays of supported data types\n* @throws {TypeError} third argument must be an array of supported data types\n* @throws {TypeError} fourth argument must be an object having supported policies\n* @throws {Error} first argument must be an object having valid properties\n* @returns {UnaryStrided1dDispatch} instance\n*\n* @example\n* import base from '@stdlib/stats-base-ndarray-max';\n* import dtypes from '@stdlib/ndarray-dtypes';\n* import ndarray from '@stdlib/ndarray-base-ctor';\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = idt;\n* var policies = {\n*     'output': 'same',\n*     'casting': 'none'\n* };\n*\n* var table = {\n*     'default': base\n* };\n* var max = new UnaryStrided1dDispatch( table, [ idt ], odt, policies );\n*\n* var xbuf = [ -1.0, 2.0, -3.0 ];\n* var x = new ndarray( 'generic', xbuf, [ xbuf.length ], [ 1 ], 0, 'row-major' );\n*\n* var y = max.apply( x );\n* // returns <ndarray>\n*\n* var v = y.get();\n* // returns 2.0\n*/\nfunction UnaryStrided1dDispatch( table, idtypes, odtypes, policies ) {\n\tvar dt;\n\tvar i;\n\tif ( !( this instanceof UnaryStrided1dDispatch ) ) {\n\t\treturn new UnaryStrided1dDispatch( table, idtypes, odtypes, policies );\n\t}\n\tif ( !isObject( table ) ) {\n\t\tthrow new TypeError( format( 'null3L', table ) );\n\t}\n\tif ( !isFunction( table.default ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an object having a \"default\" property and an associated method.' ) );\n\t}\n\tif ( hasProp( table, 'types' ) && !isCollection( table.types ) && !isEmptyCollection( table.types ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an object having a \"types\" property whose associated value is an array-like object.' ) );\n\t}\n\tif ( hasProp( table, 'fcns' ) && !isFunctionArray( table.fcns ) && !isEmptyCollection( table.fcns ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an object having a \"fcns\" property whose associated value is an array-like object containing functions.' ) );\n\t}\n\tif ( !isCollection( idtypes ) ) {\n\t\tthrow new TypeError( format( 'null2y', idtypes ) );\n\t}\n\tfor ( i = 0; i < idtypes.length; i++ ) {\n\t\tdt = idtypes[ i ];\n\t\tif (\n\t\t\t!isCollection( dt ) ||\n\t\t\tdt.length < 1 ||\n\t\t\t!everyBy( dt, isDataType )\n\t\t) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must contain arrays of data types. Value: `%s`.', idtypes ) );\n\t\t}\n\t}\n\tif (\n\t\t!isCollection( odtypes ) ||\n\t\todtypes.length < 1 ||\n\t\t!everyBy( odtypes, isDataType )\n\t) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an array of data types. Value: `%s`.', odtypes ) );\n\t}\n\tif ( !isObject( policies ) ) {\n\t\tthrow new TypeError( format( 'null43', policies ) );\n\t}\n\tif ( !isOutputDataTypePolicy( policies.output ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be an object having a supported output data type policy. Value: `%s`.', policies.output ) );\n\t}\n\tif ( !isInputCastingPolicy( policies.casting ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be an object having a supported casting policy. Value: `%s`.', policies.casting ) );\n\t}\n\tthis._table = {\n\t\t'default': table.default,\n\t\t'types': ( table.types ) ? dtypes2enums( table.types ) : [], // note: convert to enums (i.e., integers) to ensure faster comparisons\n\t\t'fcns': ( table.fcns ) ? copy( table.fcns ) : []\n\t};\n\tif ( this._table.types.length !== this._table.fcns.length ) {\n\t\tthrow new Error( 'invalid argument. First argument specifies an unexpected number of types. An input ndarray data type must be specified for each provided strided function.' );\n\t}\n\tthis._idtypes = idtypes;\n\tthis._odtypes = odtypes;\n\tthis._policies = {\n\t\t'output': policies.output,\n\t\t'casting': policies.casting\n\t};\n\treturn this;\n}\n\n/**\n* Performs a reduction on a provided input ndarray.\n*\n* @name apply\n* @memberof UnaryStrided1dDispatch.prototype\n* @type {Function}\n* @param {ndarrayLike} x - input ndarray\n* @param {...ndarrayLike} [args] - additional ndarray arguments\n* @param {Options} [options] - function options\n* @param {IntegerArray} [options.dims] - list of dimensions over which to perform a reduction\n* @param {boolean} [options.keepdims=false] - boolean indicating whether the reduced dimensions should be included in the returned ndarray as singleton dimensions\n* @param {string} [options.dtype] - output ndarray data type\n* @throws {TypeError} first argument must be an ndarray-like object\n* @throws {TypeError} options argument must be an object\n* @throws {RangeError} dimension indices must not exceed input ndarray bounds\n* @throws {RangeError} number of dimension indices must not exceed the number of input ndarray dimensions\n* @throws {Error} must provide valid options\n* @returns {ndarray} output ndarray\n*\n* @example\n* import base from '@stdlib/stats-base-ndarray-max';\n* import dtypes from '@stdlib/ndarray-dtypes';\n* import ndarray from '@stdlib/ndarray-base-ctor';\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = idt;\n* var policies = {\n*     'output': 'same',\n*     'casting': 'none'\n* };\n*\n* var table = {\n*     'default': base\n* };\n* var max = new UnaryStrided1dDispatch( table, [ idt ], odt, policies );\n*\n* var xbuf = [ -1.0, 2.0, -3.0 ];\n* var x = new ndarray( 'generic', xbuf, [ xbuf.length ], [ 1 ], 0, 'row-major' );\n*\n* var y = max.apply( x );\n* // returns <ndarray>\n*\n* var v = y.get();\n* // returns 2.0\n*/\nsetReadOnly( UnaryStrided1dDispatch.prototype, 'apply', function apply( x ) {\n\tvar options;\n\tvar dtypes;\n\tvar nargs;\n\tvar args;\n\tvar opts;\n\tvar err;\n\tvar idx;\n\tvar shx;\n\tvar shy;\n\tvar arr;\n\tvar tmp;\n\tvar xdt;\n\tvar ydt;\n\tvar dt;\n\tvar f;\n\tvar N;\n\tvar y;\n\tvar i;\n\n\tnargs = arguments.length;\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'null5t', x ) );\n\t}\n\txdt = getDType( x );\n\tif ( !contains( this._idtypes[ 0 ], xdt ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must have one of the following data types: \"%s\". Data type: `%s`.', join( this._idtypes[ 0 ], '\", \"' ), xdt ) );\n\t}\n\targs = [ x ];\n\tfor ( i = 1; i < nargs; i++ ) {\n\t\tarr = arguments[ i ];\n\t\tif ( !isndarrayLike( arr ) ) {\n\t\t\tbreak;\n\t\t}\n\t\tdt = getDType( arr );\n\t\tif ( !contains( this._idtypes[ i ], dt ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Argument %d must have one of the following data types: \"%s\". Data type: `%s`.', i, join( this._idtypes[ i ], '\", \"' ), dt ) );\n\t\t}\n\t\t// Note: we don't type promote additional ndarray arguments, as they are passed as scalars to the underlying strided reduction function...\n\t\targs.push( arr );\n\t}\n\t// If we didn't make it up until the last argument, this means that we found a non-options argument which was not an ndarray...\n\tif ( i < nargs-1 ) {\n\t\tthrow new TypeError( format( 'invalid argument. Argument %d must be an ndarray-like object. Value: `%s`.', i, arguments[ i ] ) );\n\t}\n\tshx = getShape( x );\n\tN = shx.length;\n\n\topts = objectAssign( {}, defaults );\n\tif ( nargs > i ) {\n\t\toptions = arguments[ nargs-1 ];\n\t\terr = validate( opts, N, this._odtypes, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// When a list of dimensions is not provided, reduce the entire input ndarray across all dimensions...\n\tif ( opts.dims === null ) {\n\t\topts.dims = zeroTo( N );\n\t}\n\t// Resolve the list of non-reduced dimensions:\n\tidx = indicesComplement( N, opts.dims );\n\n\t// Resolve the output array shape:\n\tshy = takeIndexed( shx, idx );\n\n\t// Initialize an output array whose shape matches that of the non-reduced dimensions and which has the same memory layout as the input ndarray:\n\tydt = opts.dtype || unaryOutputDataType( xdt, this._policies.output );\n\ty = empty( shy, {\n\t\t'dtype': ydt,\n\t\t'order': getOrder( x )\n\t});\n\n\t// Determine whether we need to cast the input ndarray...\n\tdt = unaryInputCastingDataType( xdt, ydt, this._policies.casting );\n\tif ( xdt !== dt ) {\n\t\t// TODO: replace the following logic with a call to `ndarray/base/(?maybe-)(cast|convert|copy)` or similar utility\n\t\ttmp = baseEmpty( dt, shx, getOrder( x ) );\n\t\tassign( [ x, tmp ] );\n\t\targs[ 0 ] = tmp;\n\t\txdt = dt;\n\t}\n\t// Resolve the lower-level strided function satisfying the input ndarray data type:\n\tdtypes = [ resolveEnum( xdt ) ];\n\ti = gindexOfRow( this._table.fcns.length, 1, this._table.types, 1, 1, 0, dtypes, 1, 0 ); // eslint-disable-line max-len\n\tif ( i >= 0 ) {\n\t\tf = this._table.fcns[ i ];\n\t} else {\n\t\tf = this._table.default;\n\t}\n\t// Perform the reduction:\n\tunaryReduceStrided1d( f, insertAt( args, 1, y ), opts.dims );\n\n\t// Check whether we need to reinsert singleton dimensions which can be useful for broadcasting the returned output array to the shape of the original input array...\n\tif ( opts.keepdims ) {\n\t\ty = spreadDimensions( N, y, idx );\n\t}\n\treturn y;\n});\n\n/**\n* Performs a reduction on a provided input ndarray and assigns results to a provided output ndarray.\n*\n* @name assign\n* @memberof UnaryStrided1dDispatch.prototype\n* @type {Function}\n* @param {ndarrayLike} x - input ndarray\n* @param {...ndarrayLike} [args] - additional ndarray arguments\n* @param {ndarrayLike} out - output ndarray\n* @param {Options} [options] - function options\n* @param {IntegerArray} [options.dims] - list of dimensions over which to perform a reduction\n* @throws {TypeError} first argument must be an ndarray\n* @throws {TypeError} first argument must have a supported data type\n* @throws {TypeError} output argument must be an ndarray\n* @throws {TypeError} options argument must be an object\n* @throws {RangeError} dimension indices must not exceed input ndarray bounds\n* @throws {RangeError} number of dimension indices must not exceed the number of input ndarray dimensions\n* @throws {Error} must provide valid options\n* @returns {ndarrayLike} output ndarray\n*\n* @example\n* import base from '@stdlib/stats-base-ndarray-max';\n* import dtypes from '@stdlib/ndarray-dtypes';\n* import ndarray from '@stdlib/ndarray-base-ctor';\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = idt;\n* var policies = {\n*     'output': 'same',\n*     'casting': 'none'\n* };\n*\n* var table = {\n*     'default': base\n* };\n* var max = new UnaryStrided1dDispatch( table, [ idt ], odt, policies );\n*\n* var xbuf = [ -1.0, 2.0, -3.0 ];\n* var x = new ndarray( 'generic', xbuf, [ xbuf.length ], [ 1 ], 0, 'row-major' );\n*\n* var ybuf = [ 0.0 ];\n* var y = new ndarray( 'generic', ybuf, [], [ 0 ], 0, 'row-major' );\n*\n* var out = max.assign( x, y );\n* // returns <ndarray>\n*\n* var v = out.get();\n* // returns 2.0\n*\n* var bool = ( out === y );\n* // returns true\n*/\nsetReadOnly( UnaryStrided1dDispatch.prototype, 'assign', function assign( x ) {\n\tvar options;\n\tvar dtypes;\n\tvar nargs;\n\tvar opts;\n\tvar args;\n\tvar arr;\n\tvar err;\n\tvar flg;\n\tvar xdt;\n\tvar tmp;\n\tvar dt;\n\tvar N;\n\tvar f;\n\tvar y;\n\tvar i;\n\n\tnargs = arguments.length;\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'null5t', x ) );\n\t}\n\t// Validate the input ndarray data type in order to maintain similar behavior to `apply` above...\n\txdt = getDType( x );\n\tif ( !contains( this._idtypes[ 0 ], xdt ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must have one of the following data types: \"%s\". Data type: `%s`.', join( this._idtypes[ 0 ], '\", \"' ), xdt ) );\n\t}\n\targs = [ x ];\n\n\t// Resolve additional ndarray arguments...\n\tfor ( i = 1; i < nargs; i++ ) {\n\t\tarr = arguments[ i ];\n\t\tif ( !isndarrayLike( arr ) ) {\n\t\t\tbreak;\n\t\t}\n\t\targs.push( arr );\n\t}\n\t// Ensure that we were provided an output ndarray...\n\tif ( i < 2 ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an ndarray-like object. Value: `%s`.', arguments[ 1 ] ) );\n\t}\n\t// If we processed all but the last argument, assume that the last argument is an options argument...\n\telse if ( i === nargs-1 ) {\n\t\toptions = arguments[ i ];\n\t\tflg = true;\n\t}\n\t// Otherwise, if we have more than one argument remaining, then at least one argument is not an ndarray but should be...\n\telse if ( i < nargs-1 ) {\n\t\tthrow new TypeError( format( 'invalid argument. Argument %d must be an ndarray-like object. Value: `%s`.', i, arguments[ i ] ) );\n\t}\n\t// Cache a reference to the output ndarray:\n\ty = args.pop();\n\n\t// Verify that additional ndarray arguments have expected dtypes (note: we intentionally don't validate the output ndarray dtype in order to provide an escape hatch for a user wanting to have an output ndarray having a specific dtype that `apply` does not support; note: we don't type promote additional ndarray arguments, as they are passed as scalars to the underlying strided reduction function)...\n\tfor ( i = 1; i < args.length; i++ ) {\n\t\tdt = getDType( args[ i ] );\n\t\tif ( !contains( this._idtypes[ i ], dt ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Argument %d must have one of the following data types: \"%s\". Data type: `%s`.', i, join( this._idtypes[ i ], '\", \"' ), dt ) );\n\t\t}\n\t}\n\t// Validate any provided options...\n\tN = ndims( x );\n\topts = objectAssign( {}, defaults );\n\tif ( flg ) {\n\t\terr = validate( opts, N, this._odtypes, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// When a list of dimensions is not provided, reduce the entire input array across all dimensions...\n\tif ( opts.dims === null ) {\n\t\topts.dims = zeroTo( N );\n\t}\n\t// Determine whether we need to cast the input ndarray...\n\tdt = unaryInputCastingDataType( xdt, getDType( y ), this._policies.casting ); // eslint-disable-line max-len\n\tif ( xdt !== dt ) {\n\t\t// TODO: replace the following logic with a call to `ndarray/base/(?maybe-)(cast|convert|copy)` or similar utility\n\t\ttmp = baseEmpty( dt, getShape( x ), getOrder( x ) );\n\t\tassign( [ x, tmp ] );\n\t\targs[ 0 ] = tmp;\n\t\txdt = dt;\n\t}\n\t// Resolve the lower-level strided function satisfying the input ndarray data type:\n\tdtypes = [ resolveEnum( xdt ) ];\n\ti = gindexOfRow( this._table.fcns.length, 1, this._table.types, 1, 1, 0, dtypes, 1, 0 ); // eslint-disable-line max-len\n\tif ( i >= 0 ) {\n\t\tf = this._table.fcns[ i ];\n\t} else {\n\t\tf = this._table.default;\n\t}\n\t// Perform the reduction:\n\tunaryReduceStrided1d( f, insertAt( args, 1, y ), opts.dims ); // note: we assume that this lower-level function handles further validation of the output ndarray (e.g., expected shape, etc)\n\n\treturn y;\n});\n\n\n// EXPORTS //\n\nexport default UnaryStrided1dDispatch;\n"],"names":["validate","opts","ndims","dtypes","options","tmp","isObject","TypeError","format","hasOwnProp","keepdims","isBoolean","dims","isIntegerArray","isEmptyCollection","normalizeIndices","RangeError","join","length","Error","dtype","contains","UnaryStrided1dDispatch","table","idtypes","odtypes","policies","dt","i","this","isFunction","default","hasProp","isCollection","types","isFunctionArray","fcns","everyBy","isDataType","isOutputDataTypePolicy","output","isInputCastingPolicy","casting","_table","dtypes2enums","copy","_idtypes","_odtypes","_policies","setReadOnly","prototype","x","nargs","args","err","idx","shx","shy","arr","xdt","ydt","f","N","y","arguments","isndarrayLike","getDType","push","getShape","objectAssign","defaults","zeroTo","indicesComplement","takeIndexed","unaryOutputDataType","empty","order","getOrder","unaryInputCastingDataType","baseEmpty","assign","resolveEnum","gindexOfRow","unaryReduceStrided1d","insertAt","spreadDimensions","flg","pop"],"mappings":"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"}