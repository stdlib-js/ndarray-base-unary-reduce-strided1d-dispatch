{"version":3,"file":"index.mjs","sources":["../lib/validate.js","../lib/index_of_types.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObject from '@stdlib/assert-is-plain-object';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport { primitives as isIntegerArray } from '@stdlib/assert-is-integer-array';\nimport isEmptyCollection from '@stdlib/assert-is-empty-collection';\nimport normalizeIndices from '@stdlib/ndarray-base-to-unique-normalized-indices';\nimport join from '@stdlib/array-base-join';\nimport contains from '@stdlib/array-base-assert-contains';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {NonNegativeInteger} ndims - number of input ndarray dimensions\n* @param {Array} dtypes - list of supported output data types\n* @param {Options} options - function options\n* @param {boolean} [options.keepdims] - boolean indicating whether the reduced dimensions should be included in the returned ndarray as singleton dimensions\n* @param {IntegerArray} [options.dims] - list of dimensions over which to perform a reduction\n* @param {string} [options.dtype] - output ndarray data type\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var dtypes = [ 'float64', 'float32', 'generic' ];\n*\n* var opts = {};\n* var options = {\n*     'keepdims': true\n* };\n* var err = validate( opts, 3, dtypes, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, ndims, dtypes, options ) {\n\tvar tmp;\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'null2V', options ) );\n\t}\n\tif ( hasOwnProp( options, 'keepdims' ) ) {\n\t\topts.keepdims = options.keepdims;\n\t\tif ( !isBoolean( opts.keepdims ) ) {\n\t\t\treturn new TypeError( format( 'null2o', 'keepdims', opts.keepdims ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'dims' ) ) {\n\t\topts.dims = options.dims;\n\t\tif ( !isIntegerArray( opts.dims ) && !isEmptyCollection( opts.dims ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an array of integers. Option: `%s`.', 'dims', opts.dims ) );\n\t\t}\n\t\ttmp = normalizeIndices( opts.dims, ndims-1 );\n\t\tif ( tmp === null ) {\n\t\t\treturn new RangeError( format( 'invalid option. `%s` option contains an out-of-bounds dimension index. Option: [%s].', 'dims', join( opts.dims, ',' ) ) );\n\t\t}\n\t\tif ( tmp.length !== opts.dims.length ) {\n\t\t\treturn new Error( format( 'invalid option. `%s` option contains duplicate indices. Option: [%s].', 'dims', join( opts.dims, ',' ) ) );\n\t\t}\n\t\topts.dims = tmp;\n\t}\n\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\topts.dtype = options.dtype;\n\t\tif ( !contains( dtypes, opts.dtype ) ) {\n\t\t\treturn new TypeError( format( 'null4S', 'dtype', join( dtypes, '\", \"' ), opts.dtype ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the first row index at which a given one-dimensional array of types can be found in a two-dimensional reference array of types (or `-1` if not found).\n*\n* ## Notes\n*\n* -   The intended use case for this function is for type dispatch (i.e., given a set of array data types, find a matching interface according the interface's accepted array data types).\n* -   The function assumes that `x` is stored in row-major order.\n* -   The function assumes that the number of indexed elements in `y` equals the number of columns in `x`.\n* -   The function returns a row index. To convert to a linear index, multiply `strideX1` by the return value.\n*\n* @private\n* @param {NonNegativeInteger} N - number of rows in `x` (size of first dimension)\n* @param {NonNegativeInteger} M - number of columns in `x` (size of second dimension)\n* @param {ArrayLikeObject} x - input two-dimensional reference array\n* @param {integer} strideX1 - `x` stride length along first dimension\n* @param {integer} strideX2 - `x` stride length along second dimension\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {ArrayLikeObject} y - search array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - `y` starting index\n* @returns {integer} row index (if found) and `-1` otherwise\n*\n* @example\n* // Define a reference array to search:\n* var types = [\n*     'float64', 'float64', 'float64',\n*     'float32', 'float32', 'float32',\n*     'uint32', 'uint32', 'float64',\n*     'int32', 'int32', 'float64',\n*     'uint16', 'uint16', 'float64',\n*     'int16', 'int16', 'float64',\n*     'uint8', 'uint8', 'float64',\n*     'int8', 'int8', 'float64'\n* ];\n*\n* // Define reference array dimensions:\n* var N = 8; // rows\n* var M = 3; // columns\n*\n* // Define a search array:\n* y1 = [\n*     'float32', 'float32', 'float32',\n* ];\n*\n* // Find the list of types:\n* var r1 = indexOfTypes( N, M, types, M, 1, 0, y1, 1, 0 );\n* // returns 1\n*\n// Define a search array:\n* y2 = [\n*     'float32', 'float32', 'float64',\n* ];\n*\n* // Find the list of types:\n* var r2 = indexOfTypes( N, M, types, M, 1, 0, y2, 1, 0 );\n* // returns -1\n*/\nfunction indexOfTypes( N, M, x, strideX1, strideX2, offsetX, y, strideY, offsetY ) { // eslint-disable-line max-len\n\tvar ix;\n\tvar iy;\n\tvar i;\n\tvar j;\n\n\t// Search for the first row which matches `y`...\n\tix = offsetX;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tiy = offsetY;\n\t\tfor ( j = 0; j < M; j++ ) {\n\t\t\tif ( x[ ix+(j*strideX2) ] !== y[ iy ] ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tiy += strideY;\n\t\t}\n\t\t// If we successfully iterated over all columns, then that means we've found a match...\n\t\tif ( j === M ) {\n\t\t\treturn i;\n\t\t}\n\t\tix += strideX1;\n\t}\n\treturn -1;\n}\n\n\n// EXPORTS //\n\nexport default indexOfTypes;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport hasProp from '@stdlib/assert-has-property';\nimport isndarrayLike from '@stdlib/assert-is-ndarray-like';\nimport isObject from '@stdlib/assert-is-object';\nimport isFunction from '@stdlib/assert-is-function';\nimport isCollection from '@stdlib/assert-is-collection';\nimport isEmptyCollection from '@stdlib/assert-is-empty-collection';\nimport isFunctionArray from '@stdlib/assert-is-function-array';\nimport isDataType from '@stdlib/array-base-assert-is-data-type';\nimport isOutputDataTypePolicy from '@stdlib/ndarray-base-assert-is-output-data-type-policy';\nimport contains from '@stdlib/array-base-assert-contains';\nimport unaryReduceStrided1d from '@stdlib/ndarray-base-unary-reduce-strided1d';\nimport unaryOutputDataType from '@stdlib/ndarray-base-unary-output-dtype';\nimport resolveEnum from '@stdlib/ndarray-base-dtype-resolve-enum';\nimport spreadDimensions from '@stdlib/ndarray-base-spread-dimensions';\nimport getShape from '@stdlib/ndarray-shape'; // note: non-base accessor is intentional due to input ndarrays originating in userland\nimport ndims from '@stdlib/ndarray-ndims';\nimport getDType from '@stdlib/ndarray-base-dtype';\nimport getOrder from '@stdlib/ndarray-base-order';\nimport empty from '@stdlib/ndarray-empty';\nimport indicesComplement from '@stdlib/array-base-indices-complement';\nimport takeIndexed from '@stdlib/array-base-take-indexed';\nimport zeroTo from '@stdlib/array-base-zero-to';\nimport join from '@stdlib/array-base-join';\nimport copy from '@stdlib/array-base-copy';\nimport everyBy from '@stdlib/array-base-every-by';\nimport objectAssign from '@stdlib/object-assign';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport defaults from './defaults.json';\nimport validate from './validate.js';\nimport indexOfTypes from './index_of_types.js';\n\n\n// FUNCTIONS //\n\n/**\n* Returns a list of data type enumeration constants.\n*\n* @private\n* @param {Collection} types - list of types\n* @returns {IntegerArray} list of data type enumeration constants\n*/\nfunction types2enums( types ) {\n\tvar out;\n\tvar i;\n\n\tout = [];\n\tfor ( i = 0; i < types.length; i++ ) {\n\t\tout.push( resolveEnum( types[ i ] ) ); // note: we're assuming that `types[i]` is a known data type; otherwise, the resolved enum will be `null`\n\t}\n\treturn out;\n}\n\n/**\n* Reorders a list of ndarrays such that the output ndarray is the second ndarray argument when passing along to a resolved lower-level strided function.\n*\n* @private\n* @param {Array<ndarray>} arrays - list of input ndarrays\n* @param {ndarray} output - output ndarray\n* @returns {Array<ndarray>} reordered list\n*/\nfunction reorder( arrays, output ) { // TODO: consider replacing with an `array/base/*` utility which expands an input array by inserting a specified value at a specified index and returns a new array\n\tvar out;\n\tvar i;\n\tvar j;\n\n\tout = [];\n\tfor ( i = 0, j = 0; i <= arrays.length; i++ ) {\n\t\tif ( i === 1 ) {\n\t\t\tout.push( output );\n\t\t} else {\n\t\t\tout.push( arrays[ j ] );\n\t\t\tj += 1;\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Constructor for performing a reduction on an input ndarray.\n*\n* @constructor\n* @param {Object} table - dispatch table\n* @param {Function} table.default - default strided reduction function\n* @param {StringArray} [table.types=[]] - one-dimensional list of ndarray data types describing specialized input ndarray argument signatures\n* @param {ArrayLikeObject<Function>} [table.fcns=[]] - list of strided reduction functions which are specific to specialized input ndarray argument signatures\n* @param {ArrayLikeObject<StringArray>} idtypes - list containing lists of supported input data types for each ndarray argument\n* @param {StringArray} odtypes - list of supported output data types\n* @param {string} policy - output data type policy\n* @throws {TypeError} first argument must be an object having valid properties\n* @throws {TypeError} second argument must be an array containing arrays of supported data types\n* @throws {TypeError} third argument must be an array of supported data types\n* @throws {TypeError} fourth argument must be a supported output data type policy\n* @throws {Error} first argument must be an object having valid properties\n* @returns {UnaryStrided1dDispatch} instance\n*\n* @example\n* import base from '@stdlib/stats-base-ndarray-max';\n* import dtypes from '@stdlib/ndarray-dtypes';\n* import ndarray from '@stdlib/ndarray-base-ctor';\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = idt;\n* var policy = 'same';\n*\n* var table = {\n*     'default': base\n* };\n* var max = new UnaryStrided1dDispatch( table, [ idt ], odt, policy );\n*\n* var xbuf = [ -1.0, 2.0, -3.0 ];\n* var x = new ndarray( 'generic', xbuf, [ xbuf.length ], [ 1 ], 0, 'row-major' );\n*\n* var y = max.apply( x );\n* // returns <ndarray>\n*\n* var v = y.get();\n* // returns 2.0\n*/\nfunction UnaryStrided1dDispatch( table, idtypes, odtypes, policy ) {\n\tvar dt;\n\tvar i;\n\tif ( !( this instanceof UnaryStrided1dDispatch ) ) {\n\t\treturn new UnaryStrided1dDispatch( table, idtypes, odtypes, policy );\n\t}\n\tif ( !isObject( table ) ) {\n\t\tthrow new TypeError( format( 'null3L', table ) );\n\t}\n\tif ( !isFunction( table.default ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an object having a \"default\" property and an associated method.' ) );\n\t}\n\tif ( hasProp( table, 'types' ) && !isCollection( table.types ) && !isEmptyCollection( table.types ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an object having a \"types\" property whose associated value is an array-like object.' ) );\n\t}\n\tif ( hasProp( table, 'fcns' ) && !isFunctionArray( table.fcns ) && !isEmptyCollection( table.fcns ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an object having a \"fcns\" property whose associated value is an array-like object containing functions.' ) );\n\t}\n\tif ( !isCollection( idtypes ) ) {\n\t\tthrow new TypeError( format( 'null2y', idtypes ) );\n\t}\n\tfor ( i = 0; i < idtypes.length; i++ ) {\n\t\tdt = idtypes[ i ];\n\t\tif (\n\t\t\t!isCollection( dt ) ||\n\t\t\tdt.length < 1 ||\n\t\t\t!everyBy( dt, isDataType )\n\t\t) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must contain arrays of data types. Value: `%s`.', idtypes ) );\n\t\t}\n\t}\n\tif (\n\t\t!isCollection( odtypes ) ||\n\t\todtypes.length < 1 ||\n\t\t!everyBy( odtypes, isDataType )\n\t) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an array of data types. Value: `%s`.', odtypes ) );\n\t}\n\tif ( !isOutputDataTypePolicy( policy ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be a supported output data type policy. Value: `%s`.', policy ) );\n\t}\n\tthis._table = {\n\t\t'default': table.default,\n\t\t'types': ( table.types ) ? types2enums( table.types ) : [], // note: convert to enums (i.e., integers) to ensure faster comparisons\n\t\t'fcns': ( table.fcns ) ? copy( table.fcns ) : []\n\t};\n\tif ( this._table.types.length !== this._table.fcns.length ) {\n\t\tthrow new Error( 'invalid argument. First argument specifies an unexpected number of types. An input ndarray data type must be specified for each provided strided reduction function.' );\n\t}\n\tthis._idtypes = idtypes;\n\tthis._odtypes = odtypes;\n\tthis._policy = policy;\n\treturn this;\n}\n\n/**\n* Performs a reduction on a provided input ndarray.\n*\n* @name apply\n* @memberof UnaryStrided1dDispatch.prototype\n* @type {Function}\n* @param {ndarrayLike} x - input ndarray\n* @param {...ndarrayLike} [args] - additional ndarray arguments\n* @param {Options} [options] - function options\n* @param {IntegerArray} [options.dims] - list of dimensions over which to perform a reduction\n* @param {boolean} [options.keepdims=false] - boolean indicating whether the reduced dimensions should be included in the returned ndarray as singleton dimensions\n* @param {string} [options.dtype] - output ndarray data type\n* @throws {TypeError} first argument must be an ndarray-like object\n* @throws {TypeError} options argument must be an object\n* @throws {RangeError} dimension indices must not exceed input ndarray bounds\n* @throws {RangeError} number of dimension indices must not exceed the number of input ndarray dimensions\n* @throws {Error} must provide valid options\n* @returns {ndarray} output ndarray\n*\n* @example\n* import base from '@stdlib/stats-base-ndarray-max';\n* import dtypes from '@stdlib/ndarray-dtypes';\n* import ndarray from '@stdlib/ndarray-base-ctor';\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = idt;\n* var policy = 'same';\n*\n* var table = {\n*     'default': base\n* };\n* var max = new UnaryStrided1dDispatch( table, [ idt ], odt, policy );\n*\n* var xbuf = [ -1.0, 2.0, -3.0 ];\n* var x = new ndarray( 'generic', xbuf, [ xbuf.length ], [ 1 ], 0, 'row-major' );\n*\n* var y = max.apply( x );\n* // returns <ndarray>\n*\n* var v = y.get();\n* // returns 2.0\n*/\nsetReadOnly( UnaryStrided1dDispatch.prototype, 'apply', function apply( x ) {\n\tvar options;\n\tvar dtypes;\n\tvar nargs;\n\tvar args;\n\tvar opts;\n\tvar err;\n\tvar idx;\n\tvar shx;\n\tvar shy;\n\tvar arr;\n\tvar dt;\n\tvar f;\n\tvar N;\n\tvar y;\n\tvar i;\n\n\tnargs = arguments.length;\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'null5t', x ) );\n\t}\n\tdt = getDType( x );\n\tif ( !contains( this._idtypes[ 0 ], dt ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must have one of the following data types: \"%s\". Data type: `%s`.', join( this._idtypes[ 0 ], '\", \"' ), dt ) );\n\t}\n\targs = [ x ];\n\tfor ( i = 1; i < nargs; i++ ) {\n\t\tarr = arguments[ i ];\n\t\tif ( !isndarrayLike( arr ) ) {\n\t\t\tbreak;\n\t\t}\n\t\tdt = getDType( arr );\n\t\tif ( !contains( this._idtypes[ i ], dt ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Argument %d must have one of the following data types: \"%s\". Data type: `%s`.', i, join( this._idtypes[ i ], '\", \"' ), dt ) );\n\t\t}\n\t\targs.push( arr );\n\t}\n\t// If we didn't make it up until the last argument, this means that we found a non-options argument which was not an ndarray...\n\tif ( i < nargs-1 ) {\n\t\tthrow new TypeError( format( 'invalid argument. Argument %d must be an ndarray-like object. Value: `%s`.', i, arguments[ i ] ) );\n\t}\n\tshx = getShape( x );\n\tN = shx.length;\n\n\topts = objectAssign( {}, defaults );\n\tif ( nargs > i ) {\n\t\toptions = arguments[ nargs-1 ];\n\t\terr = validate( opts, N, this._odtypes, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// When a list of dimensions is not provided, reduce the entire input array across all dimensions...\n\tif ( opts.dims === null ) {\n\t\topts.dims = zeroTo( N );\n\t}\n\t// Resolve the list of non-reduced dimensions:\n\tidx = indicesComplement( N, opts.dims );\n\n\t// Resolve the output array shape:\n\tshy = takeIndexed( shx, idx );\n\n\t// Initialize an output array whose shape matches that of the non-reduced dimensions and which has the same memory layout as the input array:\n\ty = empty( shy, {\n\t\t'dtype': opts.dtype || unaryOutputDataType( dt, this._policy ),\n\t\t'order': getOrder( x )\n\t});\n\n\t// Resolve the lower-level strided function satisfying the input ndarray data type:\n\tdtypes = [ resolveEnum( dt ) ];\n\ti = indexOfTypes( this._table.fcns.length, 1, this._table.types, 1, 1, 0, dtypes, 1, 0 ); // eslint-disable-line max-len\n\tif ( i >= 0 ) {\n\t\tf = this._table.fcns[ i ];\n\t} else {\n\t\tf = this._table.default;\n\t}\n\t// Perform the reduction:\n\tunaryReduceStrided1d( f, reorder( args, y ), opts.dims );\n\n\t// Check whether we need to reinsert singleton dimensions which can be useful for broadcasting the returned output array to the shape of the original input array...\n\tif ( opts.keepdims ) {\n\t\ty = spreadDimensions( N, y, idx );\n\t}\n\treturn y;\n});\n\n/**\n* Performs a reduction on a provided input ndarray and assigns results to a provided output ndarray.\n*\n* @name assign\n* @memberof UnaryStrided1dDispatch.prototype\n* @type {Function}\n* @param {ndarrayLike} x - input ndarray\n* @param {...ndarrayLike} [args] - additional ndarray arguments\n* @param {ndarrayLike} out - output ndarray\n* @param {Options} [options] - function options\n* @param {IntegerArray} [options.dims] - list of dimensions over which to perform a reduction\n* @throws {TypeError} first argument must be an ndarray\n* @throws {TypeError} first argument must have a supported data type\n* @throws {TypeError} output argument must be an ndarray\n* @throws {TypeError} options argument must be an object\n* @throws {RangeError} dimension indices must not exceed input ndarray bounds\n* @throws {RangeError} number of dimension indices must not exceed the number of input ndarray dimensions\n* @throws {Error} must provide valid options\n* @returns {ndarrayLike} output ndarray\n*\n* @example\n* import base from '@stdlib/stats-base-ndarray-max';\n* import dtypes from '@stdlib/ndarray-dtypes';\n* import ndarray from '@stdlib/ndarray-base-ctor';\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = idt;\n* var policy = 'same';\n*\n* var table = {\n*     'default': base\n* };\n* var max = new UnaryStrided1dDispatch( table, [ idt ], odt, policy );\n*\n* var xbuf = [ -1.0, 2.0, -3.0 ];\n* var x = new ndarray( 'generic', xbuf, [ xbuf.length ], [ 1 ], 0, 'row-major' );\n*\n* var ybuf = [ 0.0 ];\n* var y = new ndarray( 'generic', ybuf, [], [ 0 ], 0, 'row-major' );\n*\n* var out = max.assign( x, y );\n* // returns <ndarray>\n*\n* var v = out.get();\n* // returns 2.0\n*\n* var bool = ( out === y );\n* // returns true\n*/\nsetReadOnly( UnaryStrided1dDispatch.prototype, 'assign', function assign( x ) {\n\tvar options;\n\tvar dtypes;\n\tvar nargs;\n\tvar opts;\n\tvar args;\n\tvar arr;\n\tvar err;\n\tvar flg;\n\tvar dt;\n\tvar N;\n\tvar f;\n\tvar y;\n\tvar i;\n\n\tnargs = arguments.length;\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'null5t', x ) );\n\t}\n\t// Validate the input ndarray data type in order to maintain similar behavior to `apply` above...\n\tdt = getDType( x );\n\tif ( !contains( this._idtypes[ 0 ], dt ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must have one of the following data types: \"%s\". Data type: `%s`.', join( this._idtypes[ 0 ], '\", \"' ), dt ) );\n\t}\n\targs = [ x ];\n\n\t// Resolve additional ndarray arguments...\n\tfor ( i = 1; i < nargs; i++ ) {\n\t\tarr = arguments[ i ];\n\t\tif ( !isndarrayLike( arr ) ) {\n\t\t\tbreak;\n\t\t}\n\t\targs.push( arr );\n\t}\n\t// Ensure that we were provided an output ndarray...\n\tif ( i < 2 ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an ndarray-like object. Value: `%s`.', arguments[ 1 ] ) );\n\t}\n\t// If we processed all but the last argument, assume that the last argument is an options argument...\n\telse if ( i === nargs-1 ) {\n\t\toptions = arguments[ i ];\n\t\tflg = true;\n\t}\n\t// Otherwise, if we have more than one argument remaining, then at least one argument is not an ndarray but should be...\n\telse if ( i < nargs-1 ) {\n\t\tthrow new TypeError( format( 'invalid argument. Argument %d must be an ndarray-like object. Value: `%s`.', i, arguments[ i ] ) );\n\t}\n\t// Cache a reference to the output ndarray:\n\ty = args.pop();\n\n\t// Verify that additional ndarray arguments have expected dtypes (note: we intentionally don't validate the output ndarray dtype in order to provide an escape hatch for a user wanting to have an output ndarray having a specific dtype that `apply` does not support)...\n\tfor ( i = 1; i < args.length; i++ ) {\n\t\tdt = getDType( args[ i ] );\n\t\tif ( !contains( this._idtypes[ i ], dt ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Argument %d must have one of the following data types: \"%s\". Data type: `%s`.', i, join( this._idtypes[ i ], '\", \"' ), dt ) );\n\t\t}\n\t}\n\t// Validate any provided options...\n\tN = ndims( x );\n\topts = objectAssign( {}, defaults );\n\tif ( flg ) {\n\t\terr = validate( opts, N, this._odtypes, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// When a list of dimensions is not provided, reduce the entire input array across all dimensions...\n\tif ( opts.dims === null ) {\n\t\topts.dims = zeroTo( N );\n\t}\n\t// Resolve the lower-level strided function satisfying the input ndarray data type:\n\tdtypes = [ resolveEnum( dt ) ];\n\ti = indexOfTypes( this._table.fcns.length, 1, this._table.types, 1, 1, 0, dtypes, 1, 0 ); // eslint-disable-line max-len\n\tif ( i >= 0 ) {\n\t\tf = this._table.fcns[ i ];\n\t} else {\n\t\tf = this._table.default;\n\t}\n\t// Perform the reduction:\n\tunaryReduceStrided1d( f, reorder( args, y ), opts.dims ); // note: we assume that this lower-level function handles further validation of the output ndarray (e.g., expected shape, etc)\n\n\treturn y;\n});\n\n\n// EXPORTS //\n\nexport default UnaryStrided1dDispatch;\n"],"names":["validate","opts","ndims","dtypes","options","tmp","isObject","TypeError","format","hasOwnProp","keepdims","isBoolean","dims","isIntegerArray","isEmptyCollection","normalizeIndices","RangeError","join","length","Error","dtype","contains","indexOfTypes","N","M","x","strideX1","strideX2","offsetX","y","strideY","offsetY","ix","iy","i","j","types2enums","types","out","push","resolveEnum","reorder","arrays","output","UnaryStrided1dDispatch","table","idtypes","odtypes","policy","dt","this","isFunction","default","hasProp","isCollection","isFunctionArray","fcns","everyBy","isDataType","isOutputDataTypePolicy","_table","copy","_idtypes","_odtypes","_policy","setReadOnly","prototype","nargs","args","err","idx","shx","shy","arr","f","arguments","isndarrayLike","getDType","getShape","objectAssign","defaults","zeroTo","indicesComplement","takeIndexed","empty","unaryOutputDataType","order","getOrder","unaryReduceStrided1d","spreadDimensions","flg","pop"],"mappings":"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"}