{
  "version": 3,
  "sources": ["../lib/defaults.json", "../lib/validate.js", "../lib/index_of_types.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["{\n  \"dims\": null,\n  \"keepdims\": false\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar isIntegerArray = require( '@stdlib/assert-is-integer-array' ).primitives;\nvar isEmptyCollection = require( '@stdlib/assert-is-empty-collection' );\nvar normalizeIndices = require( '@stdlib/ndarray-base-to-unique-normalized-indices' );\nvar join = require( '@stdlib/array-base-join' );\nvar contains = require( '@stdlib/array-base-assert-contains' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {NonNegativeInteger} ndims - number of input ndarray dimensions\n* @param {Array} dtypes - list of supported output data types\n* @param {Options} options - function options\n* @param {boolean} [options.keepdims] - boolean indicating whether the reduced dimensions should be included in the returned ndarray as singleton dimensions\n* @param {IntegerArray} [options.dims] - list of dimensions over which to perform a reduction\n* @param {string} [options.dtype] - output ndarray data type\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var dtypes = [ 'float64', 'float32', 'generic' ];\n*\n* var opts = {};\n* var options = {\n*     'keepdims': true\n* };\n* var err = validate( opts, 3, dtypes, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, ndims, dtypes, options ) {\n\tvar tmp;\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'keepdims' ) ) {\n\t\topts.keepdims = options.keepdims;\n\t\tif ( !isBoolean( opts.keepdims ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'keepdims', opts.keepdims ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'dims' ) ) {\n\t\topts.dims = options.dims;\n\t\tif ( !isIntegerArray( opts.dims ) && !isEmptyCollection( opts.dims ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an array of integers. Option: `%s`.', 'dims', opts.dims ) );\n\t\t}\n\t\ttmp = normalizeIndices( opts.dims, ndims-1 );\n\t\tif ( tmp === null ) {\n\t\t\treturn new RangeError( format( 'invalid option. `%s` option contains an out-of-bounds dimension index. Option: [%s].', 'dims', join( opts.dims, ',' ) ) );\n\t\t}\n\t\tif ( tmp.length !== opts.dims.length ) {\n\t\t\treturn new Error( format( 'invalid option. `%s` option contains duplicate indices. Option: [%s].', 'dims', join( opts.dims, ',' ) ) );\n\t\t}\n\t\topts.dims = tmp;\n\t}\n\tif ( hasOwnProp( options, 'dtype' ) ) {\n\t\topts.dtype = options.dtype;\n\t\tif ( !contains( dtypes, opts.dtype ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'dtype', join( dtypes, '\", \"' ), opts.dtype ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the first row index at which a given one-dimensional array of types can be found in a two-dimensional reference array of types (or `-1` if not found).\n*\n* ## Notes\n*\n* -   The intended use case for this function is for type dispatch (i.e., given a set of array data types, find a matching interface according the interface's accepted array data types).\n* -   The function assumes that `x` is stored in row-major order.\n* -   The function assumes that the number of indexed elements in `y` equals the number of columns in `x`.\n* -   The function returns a row index. To convert to a linear index, multiply `strideX1` by the return value.\n*\n* @private\n* @param {NonNegativeInteger} N - number of rows in `x` (size of first dimension)\n* @param {NonNegativeInteger} M - number of columns in `x` (size of second dimension)\n* @param {ArrayLikeObject} x - input two-dimensional reference array\n* @param {integer} strideX1 - `x` stride length along first dimension\n* @param {integer} strideX2 - `x` stride length along second dimension\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {ArrayLikeObject} y - search array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - `y` starting index\n* @returns {integer} row index (if found) and `-1` otherwise\n*\n* @example\n* // Define a reference array to search:\n* var types = [\n*     'float64', 'float64', 'float64',\n*     'float32', 'float32', 'float32',\n*     'uint32', 'uint32', 'float64',\n*     'int32', 'int32', 'float64',\n*     'uint16', 'uint16', 'float64',\n*     'int16', 'int16', 'float64',\n*     'uint8', 'uint8', 'float64',\n*     'int8', 'int8', 'float64'\n* ];\n*\n* // Define reference array dimensions:\n* var N = 8; // rows\n* var M = 3; // columns\n*\n* // Define a search array:\n* y1 = [\n*     'float32', 'float32', 'float32',\n* ];\n*\n* // Find the list of types:\n* var r1 = indexOfTypes( N, M, types, M, 1, 0, y1, 1, 0 );\n* // returns 1\n*\n// Define a search array:\n* y2 = [\n*     'float32', 'float32', 'float64',\n* ];\n*\n* // Find the list of types:\n* var r2 = indexOfTypes( N, M, types, M, 1, 0, y2, 1, 0 );\n* // returns -1\n*/\nfunction indexOfTypes( N, M, x, strideX1, strideX2, offsetX, y, strideY, offsetY ) { // eslint-disable-line max-len\n\tvar ix;\n\tvar iy;\n\tvar i;\n\tvar j;\n\n\t// Search for the first row which matches `y`...\n\tix = offsetX;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tiy = offsetY;\n\t\tfor ( j = 0; j < M; j++ ) {\n\t\t\tif ( x[ ix+(j*strideX2) ] !== y[ iy ] ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tiy += strideY;\n\t\t}\n\t\t// If we successfully iterated over all columns, then that means we've found a match...\n\t\tif ( j === M ) {\n\t\t\treturn i;\n\t\t}\n\t\tix += strideX1;\n\t}\n\treturn -1;\n}\n\n\n// EXPORTS //\n\nmodule.exports = indexOfTypes;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar hasProp = require( '@stdlib/assert-has-property' );\nvar isndarrayLike = require( '@stdlib/assert-is-ndarray-like' );\nvar isObject = require( '@stdlib/assert-is-object' );\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar isCollection = require( '@stdlib/assert-is-collection' );\nvar isEmptyCollection = require( '@stdlib/assert-is-empty-collection' );\nvar isFunctionArray = require( '@stdlib/assert-is-function-array' );\nvar isDataType = require( '@stdlib/array-base-assert-is-data-type' );\nvar isOutputDataTypePolicy = require( '@stdlib/ndarray-base-assert-is-output-data-type-policy' );\nvar contains = require( '@stdlib/array-base-assert-contains' );\nvar unaryReduceStrided1d = require( '@stdlib/ndarray-base-unary-reduce-strided1d' );\nvar unaryOutputDataType = require( '@stdlib/ndarray-base-unary-output-dtype' );\nvar resolveEnum = require( '@stdlib/ndarray-base-dtype-resolve-enum' );\nvar spreadDimensions = require( '@stdlib/ndarray-base-spread-dimensions' );\nvar getShape = require( '@stdlib/ndarray-shape' ); // note: non-base accessor is intentional due to input ndarrays originating in userland\nvar ndims = require( '@stdlib/ndarray-ndims' );\nvar getDType = require( '@stdlib/ndarray-base-dtype' );\nvar getOrder = require( '@stdlib/ndarray-base-order' );\nvar assign = require( '@stdlib/ndarray-base-assign' );\nvar baseEmpty = require( '@stdlib/ndarray-base-empty' );\nvar empty = require( '@stdlib/ndarray-empty' );\nvar promotionRules = require( '@stdlib/ndarray-promotion-rules' );\nvar indicesComplement = require( '@stdlib/array-base-indices-complement' );\nvar takeIndexed = require( '@stdlib/array-base-take-indexed' );\nvar zeroTo = require( '@stdlib/array-base-zero-to' );\nvar join = require( '@stdlib/array-base-join' );\nvar copy = require( '@stdlib/array-base-copy' );\nvar everyBy = require( '@stdlib/array-base-every-by' );\nvar objectAssign = require( '@stdlib/object-assign' );\nvar format = require( '@stdlib/string-format' );\nvar defaults = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar indexOfTypes = require( './index_of_types.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns a list of data type enumeration constants.\n*\n* @private\n* @param {Collection} types - list of types\n* @returns {IntegerArray} list of data type enumeration constants\n*/\nfunction types2enums( types ) {\n\tvar out;\n\tvar i;\n\n\tout = [];\n\tfor ( i = 0; i < types.length; i++ ) {\n\t\tout.push( resolveEnum( types[ i ] ) ); // note: we're assuming that `types[i]` is a known data type; otherwise, the resolved enum will be `null`\n\t}\n\treturn out;\n}\n\n/**\n* Reorders a list of ndarrays such that the output ndarray is the second ndarray argument when passing along to a resolved lower-level strided function.\n*\n* @private\n* @param {Array<ndarray>} arrays - list of input ndarrays\n* @param {ndarray} output - output ndarray\n* @returns {Array<ndarray>} reordered list\n*/\nfunction reorder( arrays, output ) { // TODO: consider replacing with an `array/base/*` utility which expands an input array by inserting a specified value at a specified index and returns a new array\n\tvar out;\n\tvar i;\n\tvar j;\n\n\tout = [];\n\tfor ( i = 0, j = 0; i <= arrays.length; i++ ) {\n\t\tif ( i === 1 ) {\n\t\t\tout.push( output );\n\t\t} else {\n\t\t\tout.push( arrays[ j ] );\n\t\t\tj += 1;\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Constructor for performing a reduction on an input ndarray.\n*\n* @constructor\n* @param {Object} table - dispatch table\n* @param {Function} table.default - default strided reduction function\n* @param {StringArray} [table.types=[]] - one-dimensional list of ndarray data types describing specialized input ndarray argument signatures\n* @param {ArrayLikeObject<Function>} [table.fcns=[]] - list of strided reduction functions which are specific to specialized input ndarray argument signatures\n* @param {ArrayLikeObject<StringArray>} idtypes - list containing lists of supported input data types for each ndarray argument\n* @param {StringArray} odtypes - list of supported output data types\n* @param {string} policy - output data type policy\n* @throws {TypeError} first argument must be an object having valid properties\n* @throws {TypeError} second argument must be an array containing arrays of supported data types\n* @throws {TypeError} third argument must be an array of supported data types\n* @throws {TypeError} fourth argument must be a supported output data type policy\n* @throws {Error} first argument must be an object having valid properties\n* @returns {UnaryStrided1dDispatch} instance\n*\n* @example\n* var base = require( '@stdlib/stats-base-ndarray-max' );\n* var dtypes = require( '@stdlib/ndarray-dtypes' );\n* var ndarray = require( '@stdlib/ndarray-base-ctor' );\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = idt;\n* var policy = 'same';\n*\n* var table = {\n*     'default': base\n* };\n* var max = new UnaryStrided1dDispatch( table, [ idt ], odt, policy );\n*\n* var xbuf = [ -1.0, 2.0, -3.0 ];\n* var x = new ndarray( 'generic', xbuf, [ xbuf.length ], [ 1 ], 0, 'row-major' );\n*\n* var y = max.apply( x );\n* // returns <ndarray>\n*\n* var v = y.get();\n* // returns 2.0\n*/\nfunction UnaryStrided1dDispatch( table, idtypes, odtypes, policy ) {\n\tvar dt;\n\tvar i;\n\tif ( !( this instanceof UnaryStrided1dDispatch ) ) {\n\t\treturn new UnaryStrided1dDispatch( table, idtypes, odtypes, policy );\n\t}\n\tif ( !isObject( table ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an object. Value: `%s`.', table ) );\n\t}\n\tif ( !isFunction( table.default ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an object having a \"default\" property and an associated method.' ) );\n\t}\n\tif ( hasProp( table, 'types' ) && !isCollection( table.types ) && !isEmptyCollection( table.types ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an object having a \"types\" property whose associated value is an array-like object.' ) );\n\t}\n\tif ( hasProp( table, 'fcns' ) && !isFunctionArray( table.fcns ) && !isEmptyCollection( table.fcns ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an object having a \"fcns\" property whose associated value is an array-like object containing functions.' ) );\n\t}\n\tif ( !isCollection( idtypes ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an array-like object. Value: `%s`.', idtypes ) );\n\t}\n\tfor ( i = 0; i < idtypes.length; i++ ) {\n\t\tdt = idtypes[ i ];\n\t\tif (\n\t\t\t!isCollection( dt ) ||\n\t\t\tdt.length < 1 ||\n\t\t\t!everyBy( dt, isDataType )\n\t\t) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must contain arrays of data types. Value: `%s`.', idtypes ) );\n\t\t}\n\t}\n\tif (\n\t\t!isCollection( odtypes ) ||\n\t\todtypes.length < 1 ||\n\t\t!everyBy( odtypes, isDataType )\n\t) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be an array of data types. Value: `%s`.', odtypes ) );\n\t}\n\tif ( !isOutputDataTypePolicy( policy ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Fourth argument must be a supported output data type policy. Value: `%s`.', policy ) );\n\t}\n\tthis._table = {\n\t\t'default': table.default,\n\t\t'types': ( table.types ) ? types2enums( table.types ) : [], // note: convert to enums (i.e., integers) to ensure faster comparisons\n\t\t'fcns': ( table.fcns ) ? copy( table.fcns ) : []\n\t};\n\tif ( this._table.types.length !== this._table.fcns.length ) {\n\t\tthrow new Error( 'invalid argument. First argument specifies an unexpected number of types. An input ndarray data type must be specified for each provided strided reduction function.' );\n\t}\n\tthis._idtypes = idtypes;\n\tthis._odtypes = odtypes;\n\tthis._policy = policy;\n\treturn this;\n}\n\n/**\n* Performs a reduction on a provided input ndarray.\n*\n* @name apply\n* @memberof UnaryStrided1dDispatch.prototype\n* @type {Function}\n* @param {ndarrayLike} x - input ndarray\n* @param {...ndarrayLike} [args] - additional ndarray arguments\n* @param {Options} [options] - function options\n* @param {IntegerArray} [options.dims] - list of dimensions over which to perform a reduction\n* @param {boolean} [options.keepdims=false] - boolean indicating whether the reduced dimensions should be included in the returned ndarray as singleton dimensions\n* @param {string} [options.dtype] - output ndarray data type\n* @throws {TypeError} first argument must be an ndarray-like object\n* @throws {TypeError} options argument must be an object\n* @throws {RangeError} dimension indices must not exceed input ndarray bounds\n* @throws {RangeError} number of dimension indices must not exceed the number of input ndarray dimensions\n* @throws {Error} must provide valid options\n* @returns {ndarray} output ndarray\n*\n* @example\n* var base = require( '@stdlib/stats-base-ndarray-max' );\n* var dtypes = require( '@stdlib/ndarray-dtypes' );\n* var ndarray = require( '@stdlib/ndarray-base-ctor' );\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = idt;\n* var policy = 'same';\n*\n* var table = {\n*     'default': base\n* };\n* var max = new UnaryStrided1dDispatch( table, [ idt ], odt, policy );\n*\n* var xbuf = [ -1.0, 2.0, -3.0 ];\n* var x = new ndarray( 'generic', xbuf, [ xbuf.length ], [ 1 ], 0, 'row-major' );\n*\n* var y = max.apply( x );\n* // returns <ndarray>\n*\n* var v = y.get();\n* // returns 2.0\n*/\nsetReadOnly( UnaryStrided1dDispatch.prototype, 'apply', function apply( x ) {\n\tvar options;\n\tvar dtypes;\n\tvar nargs;\n\tvar args;\n\tvar opts;\n\tvar err;\n\tvar idx;\n\tvar shx;\n\tvar shy;\n\tvar arr;\n\tvar tmp;\n\tvar xdt;\n\tvar ydt;\n\tvar dt;\n\tvar f;\n\tvar N;\n\tvar y;\n\tvar i;\n\n\tnargs = arguments.length;\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray-like object. Value: `%s`.', x ) );\n\t}\n\txdt = getDType( x );\n\tif ( !contains( this._idtypes[ 0 ], xdt ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must have one of the following data types: \"%s\". Data type: `%s`.', join( this._idtypes[ 0 ], '\", \"' ), xdt ) );\n\t}\n\targs = [ x ];\n\tfor ( i = 1; i < nargs; i++ ) {\n\t\tarr = arguments[ i ];\n\t\tif ( !isndarrayLike( arr ) ) {\n\t\t\tbreak;\n\t\t}\n\t\tdt = getDType( arr );\n\t\tif ( !contains( this._idtypes[ i ], dt ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Argument %d must have one of the following data types: \"%s\". Data type: `%s`.', i, join( this._idtypes[ i ], '\", \"' ), dt ) );\n\t\t}\n\t\t// Note: we don't type promote additional ndarray arguments, as they are passed as scalars to the underlying strided reduction function...\n\t\targs.push( arr );\n\t}\n\t// If we didn't make it up until the last argument, this means that we found a non-options argument which was not an ndarray...\n\tif ( i < nargs-1 ) {\n\t\tthrow new TypeError( format( 'invalid argument. Argument %d must be an ndarray-like object. Value: `%s`.', i, arguments[ i ] ) );\n\t}\n\tshx = getShape( x );\n\tN = shx.length;\n\n\topts = objectAssign( {}, defaults );\n\tif ( nargs > i ) {\n\t\toptions = arguments[ nargs-1 ];\n\t\terr = validate( opts, N, this._odtypes, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// When a list of dimensions is not provided, reduce the entire input ndarray across all dimensions...\n\tif ( opts.dims === null ) {\n\t\topts.dims = zeroTo( N );\n\t}\n\t// Resolve the list of non-reduced dimensions:\n\tidx = indicesComplement( N, opts.dims );\n\n\t// Resolve the output array shape:\n\tshy = takeIndexed( shx, idx );\n\n\t// Initialize an output array whose shape matches that of the non-reduced dimensions and which has the same memory layout as the input array:\n\tydt = opts.dtype || unaryOutputDataType( xdt, this._policy );\n\ty = empty( shy, {\n\t\t'dtype': ydt,\n\t\t'order': getOrder( x )\n\t});\n\n\t// When performing an accumulation, such as a sum over many `int8` elements, we need to copy the input ndarray to a temporary workspace prior to performing a reduction whenever the promoted data type has a higher precision with the aim of guarding against overflow/underflow during intermediate computation (note: this follows similar guidance found in https://data-apis.org/array-api/latest/API_specification/generated/array_api.sum.html)...\n\tif ( xdt !== ydt && this._policy === 'accumulation' ) {\n\t\tdt = promotionRules( xdt, ydt );\n\t\tif ( dt !== -1 && xdt !== dt ) { // note: only perform the cast when an input data type promotes to an output data type; this can lead to divergence between, e.g., uint32-complex128 and uint32-complex64, where the former promotes, but the latter stays in uint32; however, we only get there if a user has specifically requested an output data type and who are we to question the user :|\n\t\t\ttmp = baseEmpty( dt, shx, getOrder( x ) );\n\t\t\tassign( [ x, tmp ] );\n\t\t\targs[ 0 ] = tmp;\n\t\t\txdt = dt;\n\t\t}\n\t}\n\t// Resolve the lower-level strided function satisfying the input ndarray data type:\n\tdtypes = [ resolveEnum( xdt ) ];\n\ti = indexOfTypes( this._table.fcns.length, 1, this._table.types, 1, 1, 0, dtypes, 1, 0 ); // eslint-disable-line max-len\n\tif ( i >= 0 ) {\n\t\tf = this._table.fcns[ i ];\n\t} else {\n\t\tf = this._table.default;\n\t}\n\t// Perform the reduction:\n\tunaryReduceStrided1d( f, reorder( args, y ), opts.dims );\n\n\t// Check whether we need to reinsert singleton dimensions which can be useful for broadcasting the returned output array to the shape of the original input array...\n\tif ( opts.keepdims ) {\n\t\ty = spreadDimensions( N, y, idx );\n\t}\n\treturn y;\n});\n\n/**\n* Performs a reduction on a provided input ndarray and assigns results to a provided output ndarray.\n*\n* @name assign\n* @memberof UnaryStrided1dDispatch.prototype\n* @type {Function}\n* @param {ndarrayLike} x - input ndarray\n* @param {...ndarrayLike} [args] - additional ndarray arguments\n* @param {ndarrayLike} out - output ndarray\n* @param {Options} [options] - function options\n* @param {IntegerArray} [options.dims] - list of dimensions over which to perform a reduction\n* @throws {TypeError} first argument must be an ndarray\n* @throws {TypeError} first argument must have a supported data type\n* @throws {TypeError} output argument must be an ndarray\n* @throws {TypeError} options argument must be an object\n* @throws {RangeError} dimension indices must not exceed input ndarray bounds\n* @throws {RangeError} number of dimension indices must not exceed the number of input ndarray dimensions\n* @throws {Error} must provide valid options\n* @returns {ndarrayLike} output ndarray\n*\n* @example\n* var base = require( '@stdlib/stats-base-ndarray-max' );\n* var dtypes = require( '@stdlib/ndarray-dtypes' );\n* var ndarray = require( '@stdlib/ndarray-base-ctor' );\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = idt;\n* var policy = 'same';\n*\n* var table = {\n*     'default': base\n* };\n* var max = new UnaryStrided1dDispatch( table, [ idt ], odt, policy );\n*\n* var xbuf = [ -1.0, 2.0, -3.0 ];\n* var x = new ndarray( 'generic', xbuf, [ xbuf.length ], [ 1 ], 0, 'row-major' );\n*\n* var ybuf = [ 0.0 ];\n* var y = new ndarray( 'generic', ybuf, [], [ 0 ], 0, 'row-major' );\n*\n* var out = max.assign( x, y );\n* // returns <ndarray>\n*\n* var v = out.get();\n* // returns 2.0\n*\n* var bool = ( out === y );\n* // returns true\n*/\nsetReadOnly( UnaryStrided1dDispatch.prototype, 'assign', function assign( x ) {\n\tvar options;\n\tvar dtypes;\n\tvar nargs;\n\tvar opts;\n\tvar args;\n\tvar arr;\n\tvar err;\n\tvar flg;\n\tvar xdt;\n\tvar ydt;\n\tvar tmp;\n\tvar dt;\n\tvar N;\n\tvar f;\n\tvar y;\n\tvar i;\n\n\tnargs = arguments.length;\n\tif ( !isndarrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an ndarray-like object. Value: `%s`.', x ) );\n\t}\n\t// Validate the input ndarray data type in order to maintain similar behavior to `apply` above...\n\txdt = getDType( x );\n\tif ( !contains( this._idtypes[ 0 ], xdt ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must have one of the following data types: \"%s\". Data type: `%s`.', join( this._idtypes[ 0 ], '\", \"' ), xdt ) );\n\t}\n\targs = [ x ];\n\n\t// Resolve additional ndarray arguments...\n\tfor ( i = 1; i < nargs; i++ ) {\n\t\tarr = arguments[ i ];\n\t\tif ( !isndarrayLike( arr ) ) {\n\t\t\tbreak;\n\t\t}\n\t\targs.push( arr );\n\t}\n\t// Ensure that we were provided an output ndarray...\n\tif ( i < 2 ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an ndarray-like object. Value: `%s`.', arguments[ 1 ] ) );\n\t}\n\t// If we processed all but the last argument, assume that the last argument is an options argument...\n\telse if ( i === nargs-1 ) {\n\t\toptions = arguments[ i ];\n\t\tflg = true;\n\t}\n\t// Otherwise, if we have more than one argument remaining, then at least one argument is not an ndarray but should be...\n\telse if ( i < nargs-1 ) {\n\t\tthrow new TypeError( format( 'invalid argument. Argument %d must be an ndarray-like object. Value: `%s`.', i, arguments[ i ] ) );\n\t}\n\t// Cache a reference to the output ndarray:\n\ty = args.pop();\n\n\t// Verify that additional ndarray arguments have expected dtypes (note: we intentionally don't validate the output ndarray dtype in order to provide an escape hatch for a user wanting to have an output ndarray having a specific dtype that `apply` does not support; note: we don't type promote additional ndarray arguments, as they are passed as scalars to the underlying strided reduction function)...\n\tfor ( i = 1; i < args.length; i++ ) {\n\t\tdt = getDType( args[ i ] );\n\t\tif ( !contains( this._idtypes[ i ], dt ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Argument %d must have one of the following data types: \"%s\". Data type: `%s`.', i, join( this._idtypes[ i ], '\", \"' ), dt ) );\n\t\t}\n\t}\n\t// Validate any provided options...\n\tN = ndims( x );\n\topts = objectAssign( {}, defaults );\n\tif ( flg ) {\n\t\terr = validate( opts, N, this._odtypes, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// When a list of dimensions is not provided, reduce the entire input array across all dimensions...\n\tif ( opts.dims === null ) {\n\t\topts.dims = zeroTo( N );\n\t}\n\t// When performing an accumulation, such as a sum over many `int8` elements, we need to copy the input ndarray to a temporary workspace prior to performing a reduction whenever the promoted data type has a higher precision with the aim of guarding against overflow/underflow during intermediate computation (note: this follows similar guidance found in https://data-apis.org/array-api/latest/API_specification/generated/array_api.sum.html)...\n\tydt = getDType( y );\n\tif ( xdt !== ydt && this._policy === 'accumulation' ) {\n\t\tdt = promotionRules( xdt, ydt );\n\t\tif ( dt !== -1 && xdt !== dt ) { // note: only perform the cast when an input data type promotes to an output data type; this can lead to divergence between, e.g., uint32-complex128 and uint32-complex64, where the former promotes, but the latter stays in uint32; however, we only get there if a user has specifically provided an output array with a data type which doesn't promote and who are we to question the user :|\n\t\t\ttmp = baseEmpty( dt, getShape( x ), getOrder( x ) );\n\t\t\tassign( [ x, tmp ] );\n\t\t\targs[ 0 ] = tmp;\n\t\t\txdt = dt;\n\t\t}\n\t}\n\t// Resolve the lower-level strided function satisfying the input ndarray data type:\n\tdtypes = [ resolveEnum( xdt ) ];\n\ti = indexOfTypes( this._table.fcns.length, 1, this._table.types, 1, 1, 0, dtypes, 1, 0 ); // eslint-disable-line max-len\n\tif ( i >= 0 ) {\n\t\tf = this._table.fcns[ i ];\n\t} else {\n\t\tf = this._table.default;\n\t}\n\t// Perform the reduction:\n\tunaryReduceStrided1d( f, reorder( args, y ), opts.dims ); // note: we assume that this lower-level function handles further validation of the output ndarray (e.g., expected shape, etc)\n\n\treturn y;\n});\n\n\n// EXPORTS //\n\nmodule.exports = UnaryStrided1dDispatch;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Constructor for performing a reduction on an input ndarray.\n*\n* @module @stdlib/ndarray-base-unary-reduce-strided1d-dispatch\n*\n* @example\n* var base = require( '@stdlib/stats-base-ndarray-max' );\n* var dtypes = require( '@stdlib/ndarray-dtypes' );\n* var ndarray = require( '@stdlib/ndarray-base-ctor' );\n* var UnaryStrided1dDispatch = require( '@stdlib/ndarray-base-unary-reduce-strided1d-dispatch' );\n*\n* var idt = dtypes( 'real_and_generic' );\n* var odt = idt;\n* var policy = 'same';\n*\n* var table = {\n*     'default': base\n* };\n* var max = new UnaryStrided1dDispatch( table, [ idt ], odt, policy );\n*\n* var xbuf = [ -1.0, 2.0, -3.0 ];\n* var x = new ndarray( 'generic', xbuf, [ xbuf.length ], [ 1 ], 0, 'row-major' );\n*\n* var y = max.apply( x );\n* // returns <ndarray>\n*\n* var v = y.get();\n* // returns 2.0\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_defaults", "__commonJSMin", "exports", "module", "require_validate", "__commonJSMin", "exports", "module", "isObject", "hasOwnProp", "isBoolean", "isIntegerArray", "isEmptyCollection", "normalizeIndices", "join", "contains", "format", "validate", "opts", "ndims", "dtypes", "options", "tmp", "require_index_of_types", "__commonJSMin", "exports", "module", "indexOfTypes", "N", "M", "x", "strideX1", "strideX2", "offsetX", "y", "strideY", "offsetY", "ix", "iy", "i", "j", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "hasProp", "isndarrayLike", "isObject", "isFunction", "isCollection", "isEmptyCollection", "isFunctionArray", "isDataType", "isOutputDataTypePolicy", "contains", "unaryReduceStrided1d", "unaryOutputDataType", "resolveEnum", "spreadDimensions", "getShape", "ndims", "getDType", "getOrder", "assign", "baseEmpty", "empty", "promotionRules", "indicesComplement", "takeIndexed", "zeroTo", "join", "copy", "everyBy", "objectAssign", "format", "defaults", "validate", "indexOfTypes", "types2enums", "types", "out", "reorder", "arrays", "output", "i", "j", "UnaryStrided1dDispatch", "table", "idtypes", "odtypes", "policy", "dt", "x", "options", "dtypes", "nargs", "args", "opts", "err", "idx", "shx", "shy", "arr", "tmp", "xdt", "ydt", "f", "N", "y", "flg", "main"]
}
